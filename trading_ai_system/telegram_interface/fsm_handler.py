from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
)
from crew_config import run_crew
import traceback

# –°–æ—Å—Ç–æ—è–Ω–∏—è
GOAL, PLATFORMS, INVESTMENT, HORIZON, RISK, AUTODEPLOY, INTERFACE, CONFIRM = range(8)

reply_keyboard = [['/cancel']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)

async def start_collecting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéØ –ö–∞–∫–∞—è —Ü–µ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ RSI –∏ MACD)", reply_markup=markup)
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["goal"] = update.message.text
    await update.message.reply_text("üìä –ö–∞–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å?")
    return PLATFORMS

async def platforms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["platforms"] = update.message.text
    await update.message.reply_text("üí∞ –ö–∞–∫—É—é —Å—É–º–º—É –≥–æ—Ç–æ–≤ –≤–ª–æ–∂–∏—Ç—å?")
    return INVESTMENT

async def investment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["investment"] = update.message.text
    await update.message.reply_text("‚è≥ –ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç?")
    return HORIZON

async def horizon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["horizon"] = update.message.text
    await update.message.reply_text("‚ö†Ô∏è –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º?")
    return RISK

async def risk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["risk"] = update.message.text
    await update.message.reply_text("üöÄ –ù—É–∂–µ–Ω –ª–∏ –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π? (–¥–∞/–Ω–µ—Ç)")
    return AUTODEPLOY

async def autodeploy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["autodeploy"] = update.message.text
    await update.message.reply_text("üí¨ –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (Telegram, Web, API)?")
    return INTERFACE

async def interface(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["interface"] = update.message.text

    summary = "\n".join([f"{k.capitalize()}: {v}" for k, v in context.user_data.items()])
    await update.message.reply_text(f"üìù –í–æ—Ç —á—Ç–æ —è —Å–æ–±—Ä–∞–ª:\n\n{summary}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏? –ù–∞–ø–∏—à–∏ /confirm –∏–ª–∏ /cancel")
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = "\n".join([f"{k}: {v}" for k, v in context.user_data.items()])
    await update.message.reply_text("ü§ñ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã...")

    try:
        result = run_crew(user_input)
        if "—É—Ç–æ—á–Ω–∏" in result.lower() or "–Ω–µ –ø–æ–Ω–∏–º–∞—é" in result.lower():
            await update.message.reply_text("üìå –û–¥–∏–Ω –∏–∑ –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Å–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–µ:\n" + result)
        else:
            await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n" + result)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END
